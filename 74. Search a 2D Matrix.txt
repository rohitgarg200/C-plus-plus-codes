//https://leetcode.com/problems/search-a-2d-matrix/

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        if(matrix.size()==1 && matrix[0].size()==1){
        if(target==matrix[0][0]){
            return 1;
        } 
            return 0;
        }
        int left=0;
        int right=matrix.size()-1;
        int mid=(right+left)/2;
        while(left<right-1){
            mid=(right+left)/2;
            if(matrix[mid][0]<target){
                left=mid;
            }else if(matrix[mid][0]>target){
                right=mid-1;
            }else{
                return 1;
            }
            
        }
        int t=mid;
        if(matrix[right][0]<=target){
            t=right;
        }else{
            t=left;
        }
       // cout<<t<<endl;
        left=0;
        right=matrix[0].size()-1;
        //int t=mid-1; cout<<t<<endl;
         mid=(left+right)/2;
       // cout<<t<<endl;
        while(left<=right){
             mid=(right+left)/2;
            if(matrix[t][mid]<target){
                left=mid+1;
            }else if(matrix[t][mid]>target){
                right=mid-1;
            }else{
                return 1;
            }
             }
        
        
        return 0;
    }
};